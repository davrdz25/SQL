type User {
  Entry: Int!
  Code: String!
  FirstName: String!
  MiddleName: String
  LastName: String!
  SecondLastName: String
  Email: String!
  Phone: String!
  Password: String!
}

type UserPublic {
  Entry: Int!
  Code: String!
  FirstName: String!
  MiddleName: String
  LastName: String!
  SecondLastName: String
  Email: String!
  Phone: String!
} 

type AuthPayload {
  token: String!
  user: UserPublic!
}

input CreateUser {
  Entry: Int!
  Code: String!
  FirstName: String!
  MiddleName: String
  LastName: String!
  SecondLastName: String
  Email: String!
  Phone: String!
  Password: String!
}
 
input UserInput {
  Entry: Int!
  Code: String!
  FirstName: String
  MiddleName: String
  LastName: String
  SecondLastName: String
  Email: String
  Phone: String
}

input UpdateUserInput {
  Entry: Int!
  Code: String!
  FirstName: String
  MiddleName: String
  LastName: String
  SecondLastName: String
  Email: String
  Phone: String
}

input ChangePasswordInput {
  Entry: Int!
  Code: String!
  OldPassword: String!
  NewPassword: String!
}

input CreateUserInput {
  Code: String!,
  FirstName: String!
  MiddleName: String
  LastName: String!
  SecondLastName: String
  Email: String!
  Phone: String!,
  Password:String!
}

input UserSession {
  Code: String
  Email: String
  Phone: String
  Password: String!
}

type UserQuery {
  GetUser(Entry: Int!): UserPublic
  GetUsers(User: UserInput!): [UserPublic!]!
}

type UserMutation {
  CreateUser(User: CreateUserInput!): UserPublic!
  UpdateUser(User: UpdateUserInput!): UserPublic!
  ModifyPassword(User: ChangePasswordInput!): Boolean!
  LoginUser(User: UserSession!): AuthPayload!
}

type Query {
  User: UserQuery
}

type Mutation {
  User: UserMutation
}