// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef ITEMOBJECT_H
#define ITEMOBJECT_H

#include "ItemSchema.h"

namespace graphql::item::object {
namespace methods::ItemHas {

template <class TImpl>
concept getNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getName(std::move(params)) } };
};

template <class TImpl>
concept getName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getName() } };
};

template <class TImpl>
concept getCodeWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getCode(std::move(params)) } };
};

template <class TImpl>
concept getCode = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getCode() } };
};

template <class TImpl>
concept getCodebarsWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getCodebars(std::move(params)) } };
};

template <class TImpl>
concept getCodebars = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getCodebars() } };
};

template <class TImpl>
concept getOnHandWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<double> { impl.getOnHand(std::move(params)) } };
};

template <class TImpl>
concept getOnHand = requires (TImpl impl)
{
	{ service::AwaitableScalar<double> { impl.getOnHand() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::ItemHas

class [[nodiscard("unnecessary construction")]] Item final
	: public service::Object
{
private:
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveName(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveCode(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveCodebars(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveOnHand(service::ResolverParams&& params) const;

	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard("unnecessary construction")]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getName(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getCode(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getCodebars(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<double> getOnHand(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard("unnecessary construction")]] Model final
		: Concept
	{
		explicit Model(std::shared_ptr<T> pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getName(service::FieldParams&& params) const override
		{
			if constexpr (methods::ItemHas::getNameWithParams<T>)
			{
				return { _pimpl->getName(std::move(params)) };
			}
			else
			{
				static_assert(methods::ItemHas::getName<T>, R"msg(Item::getName is not implemented)msg");
				return { _pimpl->getName() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getCode(service::FieldParams&& params) const override
		{
			if constexpr (methods::ItemHas::getCodeWithParams<T>)
			{
				return { _pimpl->getCode(std::move(params)) };
			}
			else
			{
				static_assert(methods::ItemHas::getCode<T>, R"msg(Item::getCode is not implemented)msg");
				return { _pimpl->getCode() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getCodebars(service::FieldParams&& params) const override
		{
			if constexpr (methods::ItemHas::getCodebarsWithParams<T>)
			{
				return { _pimpl->getCodebars(std::move(params)) };
			}
			else
			{
				static_assert(methods::ItemHas::getCodebars<T>, R"msg(Item::getCodebars is not implemented)msg");
				return { _pimpl->getCodebars() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<double> getOnHand(service::FieldParams&& params) const override
		{
			if constexpr (methods::ItemHas::getOnHandWithParams<T>)
			{
				return { _pimpl->getOnHand(std::move(params)) };
			}
			else
			{
				static_assert(methods::ItemHas::getOnHand<T>, R"msg(Item::getOnHand is not implemented)msg");
				return { _pimpl->getOnHand() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const override
		{
			if constexpr (methods::ItemHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const override
		{
			if constexpr (methods::ItemHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	explicit Item(std::unique_ptr<const Concept> pimpl) noexcept;

	[[nodiscard("unnecessary call")]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard("unnecessary call")]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const override;
	void endSelectionSet(const service::SelectionSetParams& params) const override;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	explicit Item(std::shared_ptr<T> pimpl) noexcept
		: Item { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard("unnecessary call")]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(Item)gql" };
	}
};

} // namespace graphql::item::object

#endif // ITEMOBJECT_H
