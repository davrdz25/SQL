// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef USERPUBLICOBJECT_H
#define USERPUBLICOBJECT_H

#include "UserSchema.h"

namespace graphql::user::object {
namespace methods::UserPublicHas {

template <class TImpl>
concept getEntryWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<int> { impl.getEntry(std::move(params)) } };
};

template <class TImpl>
concept getEntry = requires (TImpl impl)
{
	{ service::AwaitableScalar<int> { impl.getEntry() } };
};

template <class TImpl>
concept getCodeWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getCode(std::move(params)) } };
};

template <class TImpl>
concept getCode = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getCode() } };
};

template <class TImpl>
concept getFirstNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getFirstName(std::move(params)) } };
};

template <class TImpl>
concept getFirstName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getFirstName() } };
};

template <class TImpl>
concept getMiddleNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<std::string>> { impl.getMiddleName(std::move(params)) } };
};

template <class TImpl>
concept getMiddleName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<std::string>> { impl.getMiddleName() } };
};

template <class TImpl>
concept getLastNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getLastName(std::move(params)) } };
};

template <class TImpl>
concept getLastName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getLastName() } };
};

template <class TImpl>
concept getSecondLastNameWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::optional<std::string>> { impl.getSecondLastName(std::move(params)) } };
};

template <class TImpl>
concept getSecondLastName = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::optional<std::string>> { impl.getSecondLastName() } };
};

template <class TImpl>
concept getEmailWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getEmail(std::move(params)) } };
};

template <class TImpl>
concept getEmail = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getEmail() } };
};

template <class TImpl>
concept getPhoneWithParams = requires (TImpl impl, service::FieldParams params)
{
	{ service::AwaitableScalar<std::string> { impl.getPhone(std::move(params)) } };
};

template <class TImpl>
concept getPhone = requires (TImpl impl)
{
	{ service::AwaitableScalar<std::string> { impl.getPhone() } };
};

template <class TImpl>
concept beginSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.beginSelectionSet(params) };
};

template <class TImpl>
concept endSelectionSet = requires (TImpl impl, const service::SelectionSetParams params)
{
	{ impl.endSelectionSet(params) };
};

} // namespace methods::UserPublicHas

class [[nodiscard("unnecessary construction")]] UserPublic final
	: public service::Object
{
private:
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveEntry(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveCode(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveFirstName(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveMiddleName(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveLastName(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveSecondLastName(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolveEmail(service::ResolverParams&& params) const;
	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolvePhone(service::ResolverParams&& params) const;

	[[nodiscard("unnecessary call")]] service::AwaitableResolver resolve_typename(service::ResolverParams&& params) const;

	struct [[nodiscard("unnecessary construction")]] Concept
	{
		virtual ~Concept() = default;

		virtual void beginSelectionSet(const service::SelectionSetParams& params) const = 0;
		virtual void endSelectionSet(const service::SelectionSetParams& params) const = 0;

		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<int> getEntry(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getCode(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getFirstName(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::optional<std::string>> getMiddleName(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getLastName(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::optional<std::string>> getSecondLastName(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getEmail(service::FieldParams&& params) const = 0;
		[[nodiscard("unnecessary call")]] virtual service::AwaitableScalar<std::string> getPhone(service::FieldParams&& params) const = 0;
	};

	template <class T>
	struct [[nodiscard("unnecessary construction")]] Model final
		: Concept
	{
		explicit Model(std::shared_ptr<T> pimpl) noexcept
			: _pimpl { std::move(pimpl) }
		{
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<int> getEntry(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getEntryWithParams<T>)
			{
				return { _pimpl->getEntry(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getEntry<T>, R"msg(UserPublic::getEntry is not implemented)msg");
				return { _pimpl->getEntry() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getCode(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getCodeWithParams<T>)
			{
				return { _pimpl->getCode(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getCode<T>, R"msg(UserPublic::getCode is not implemented)msg");
				return { _pimpl->getCode() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getFirstName(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getFirstNameWithParams<T>)
			{
				return { _pimpl->getFirstName(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getFirstName<T>, R"msg(UserPublic::getFirstName is not implemented)msg");
				return { _pimpl->getFirstName() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::optional<std::string>> getMiddleName(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getMiddleNameWithParams<T>)
			{
				return { _pimpl->getMiddleName(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getMiddleName<T>, R"msg(UserPublic::getMiddleName is not implemented)msg");
				return { _pimpl->getMiddleName() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getLastName(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getLastNameWithParams<T>)
			{
				return { _pimpl->getLastName(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getLastName<T>, R"msg(UserPublic::getLastName is not implemented)msg");
				return { _pimpl->getLastName() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::optional<std::string>> getSecondLastName(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getSecondLastNameWithParams<T>)
			{
				return { _pimpl->getSecondLastName(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getSecondLastName<T>, R"msg(UserPublic::getSecondLastName is not implemented)msg");
				return { _pimpl->getSecondLastName() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getEmail(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getEmailWithParams<T>)
			{
				return { _pimpl->getEmail(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getEmail<T>, R"msg(UserPublic::getEmail is not implemented)msg");
				return { _pimpl->getEmail() };
			}
		}

		[[nodiscard("unnecessary call")]] service::AwaitableScalar<std::string> getPhone(service::FieldParams&& params) const override
		{
			if constexpr (methods::UserPublicHas::getPhoneWithParams<T>)
			{
				return { _pimpl->getPhone(std::move(params)) };
			}
			else
			{
				static_assert(methods::UserPublicHas::getPhone<T>, R"msg(UserPublic::getPhone is not implemented)msg");
				return { _pimpl->getPhone() };
			}
		}

		void beginSelectionSet(const service::SelectionSetParams& params) const override
		{
			if constexpr (methods::UserPublicHas::beginSelectionSet<T>)
			{
				_pimpl->beginSelectionSet(params);
			}
		}

		void endSelectionSet(const service::SelectionSetParams& params) const override
		{
			if constexpr (methods::UserPublicHas::endSelectionSet<T>)
			{
				_pimpl->endSelectionSet(params);
			}
		}

	private:
		const std::shared_ptr<T> _pimpl;
	};

	explicit UserPublic(std::unique_ptr<const Concept> pimpl) noexcept;

	[[nodiscard("unnecessary call")]] service::TypeNames getTypeNames() const noexcept;
	[[nodiscard("unnecessary call")]] service::ResolverMap getResolvers() const noexcept;

	void beginSelectionSet(const service::SelectionSetParams& params) const override;
	void endSelectionSet(const service::SelectionSetParams& params) const override;

	const std::unique_ptr<const Concept> _pimpl;

public:
	template <class T>
	explicit UserPublic(std::shared_ptr<T> pimpl) noexcept
		: UserPublic { std::unique_ptr<const Concept> { std::make_unique<Model<T>>(std::move(pimpl)) } }
	{
	}

	[[nodiscard("unnecessary call")]] static constexpr std::string_view getObjectType() noexcept
	{
		return { R"gql(UserPublic)gql" };
	}
};

} // namespace graphql::user::object

#endif // USERPUBLICOBJECT_H
