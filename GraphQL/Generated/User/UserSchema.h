// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#pragma once

#ifndef USERSCHEMA_H
#define USERSCHEMA_H

#include "graphqlservice/internal/Schema.h"

// Check if the library version is compatible with schemagen 4.5.0
static_assert(graphql::internal::MajorVersion == 4, "regenerate with schemagen: major version mismatch");
static_assert(graphql::internal::MinorVersion == 5, "regenerate with schemagen: minor version mismatch");

#include <array>
#include <memory>
#include <string>
#include <string_view>

namespace graphql {
namespace user {
namespace object {

class User;
class UserQuery;
class UserMutation;
class Query;
class Mutation;

} // namespace object

class [[nodiscard("unnecessary construction")]] Operations final
	: public service::Request
{
public:
	explicit Operations(std::shared_ptr<object::Query> query, std::shared_ptr<object::Mutation> mutation);

	template <class TQuery, class TMutation>
	explicit Operations(std::shared_ptr<TQuery> query, std::shared_ptr<TMutation> mutation)
		: Operations {
			std::make_shared<object::Query>(std::move(query)),
			std::make_shared<object::Mutation>(std::move(mutation))
		}
	{
	}

private:
	std::shared_ptr<object::Query> _query;
	std::shared_ptr<object::Mutation> _mutation;
};

void AddUserDetails(const std::shared_ptr<schema::ObjectType>& typeUser, const std::shared_ptr<schema::Schema>& schema);
void AddUserQueryDetails(const std::shared_ptr<schema::ObjectType>& typeUserQuery, const std::shared_ptr<schema::Schema>& schema);
void AddUserMutationDetails(const std::shared_ptr<schema::ObjectType>& typeUserMutation, const std::shared_ptr<schema::Schema>& schema);
void AddQueryDetails(const std::shared_ptr<schema::ObjectType>& typeQuery, const std::shared_ptr<schema::Schema>& schema);
void AddMutationDetails(const std::shared_ptr<schema::ObjectType>& typeMutation, const std::shared_ptr<schema::Schema>& schema);

std::shared_ptr<schema::Schema> GetSchema();

} // namespace user
} // namespace graphql

#endif // USERSCHEMA_H
