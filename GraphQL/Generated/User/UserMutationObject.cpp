// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// WARNING! Do not edit this file manually, your changes will be overwritten.

#include "UserMutationObject.h"
#include "UserPublicObject.h"
#include "AuthPayloadObject.h"

#include "graphqlservice/internal/Schema.h"

#include "graphqlservice/introspection/IntrospectionSchema.h"

#include <algorithm>
#include <functional>
#include <sstream>
#include <stdexcept>
#include <unordered_map>

using namespace std::literals;

namespace graphql::user {
namespace object {

UserMutation::UserMutation(std::unique_ptr<const Concept> pimpl) noexcept
	: service::Object{ getTypeNames(), getResolvers() }
	, _pimpl { std::move(pimpl) }
{
}

service::TypeNames UserMutation::getTypeNames() const noexcept
{
	return {
		R"gql(UserMutation)gql"sv
	};
}

service::ResolverMap UserMutation::getResolvers() const noexcept
{
	return {
		{ R"gql(LoginUser)gql"sv, [this](service::ResolverParams&& params) { return resolveLoginUser(std::move(params)); } },
		{ R"gql(CreateUser)gql"sv, [this](service::ResolverParams&& params) { return resolveCreateUser(std::move(params)); } },
		{ R"gql(UpdateUser)gql"sv, [this](service::ResolverParams&& params) { return resolveUpdateUser(std::move(params)); } },
		{ R"gql(__typename)gql"sv, [this](service::ResolverParams&& params) { return resolve_typename(std::move(params)); } },
		{ R"gql(ModifyPassword)gql"sv, [this](service::ResolverParams&& params) { return resolveModifyPassword(std::move(params)); } }
	};
}

void UserMutation::beginSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->beginSelectionSet(params);
}

void UserMutation::endSelectionSet(const service::SelectionSetParams& params) const
{
	_pimpl->endSelectionSet(params);
}

service::AwaitableResolver UserMutation::resolveCreateUser(service::ResolverParams&& params) const
{
	auto argUser = service::ModifiedArgument<user::CreateUserInput>::require("User", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	service::SelectionSetParams selectionSetParams { static_cast<const service::SelectionSetParams&>(params) };
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getCreateUser(service::FieldParams { std::move(selectionSetParams), std::move(directives) }, std::move(argUser));
	resolverLock.unlock();

	return service::ModifiedResult<UserPublic>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver UserMutation::resolveUpdateUser(service::ResolverParams&& params) const
{
	auto argUser = service::ModifiedArgument<user::UpdateUserInput>::require("User", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	service::SelectionSetParams selectionSetParams { static_cast<const service::SelectionSetParams&>(params) };
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getUpdateUser(service::FieldParams { std::move(selectionSetParams), std::move(directives) }, std::move(argUser));
	resolverLock.unlock();

	return service::ModifiedResult<UserPublic>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver UserMutation::resolveModifyPassword(service::ResolverParams&& params) const
{
	auto argUser = service::ModifiedArgument<ChangePasswordInput>::require("User", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	service::SelectionSetParams selectionSetParams { static_cast<const service::SelectionSetParams&>(params) };
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getModifyPassword(service::FieldParams { std::move(selectionSetParams), std::move(directives) }, std::move(argUser));
	resolverLock.unlock();

	return service::ModifiedResult<bool>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver UserMutation::resolveLoginUser(service::ResolverParams&& params) const
{
	auto argUser = service::ModifiedArgument<user::UserSession>::require("User", params.arguments);
	std::unique_lock resolverLock(_resolverMutex);
	service::SelectionSetParams selectionSetParams { static_cast<const service::SelectionSetParams&>(params) };
	auto directives = std::move(params.fieldDirectives);
	auto result = _pimpl->getLoginUser(service::FieldParams { std::move(selectionSetParams), std::move(directives) }, std::move(argUser));
	resolverLock.unlock();

	return service::ModifiedResult<AuthPayload>::convert(std::move(result), std::move(params));
}

service::AwaitableResolver UserMutation::resolve_typename(service::ResolverParams&& params) const
{
	return service::Result<std::string>::convert(std::string{ R"gql(UserMutation)gql" }, std::move(params));
}

} // namespace object

void AddUserMutationDetails(const std::shared_ptr<schema::ObjectType>& typeUserMutation, const std::shared_ptr<schema::Schema>& schema)
{
	typeUserMutation->AddFields({
		schema::Field::Make(R"gql(CreateUser)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(UserPublic)gql"sv)), {
			schema::InputValue::Make(R"gql(User)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(CreateUserInput)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(UpdateUser)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(UserPublic)gql"sv)), {
			schema::InputValue::Make(R"gql(User)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(UpdateUserInput)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(ModifyPassword)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(Boolean)gql"sv)), {
			schema::InputValue::Make(R"gql(User)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(ChangePasswordInput)gql"sv)), R"gql()gql"sv)
		}),
		schema::Field::Make(R"gql(LoginUser)gql"sv, R"md()md"sv, std::nullopt, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(AuthPayload)gql"sv)), {
			schema::InputValue::Make(R"gql(User)gql"sv, R"md()md"sv, schema->WrapType(introspection::TypeKind::NON_NULL, schema->LookupType(R"gql(UserSession)gql"sv)), R"gql()gql"sv)
		})
	});
}

} // namespace graphql::user
